/**
 * Constructor that creates buffer component with single input
 * in: double, single buffered output  out: Array[Double].
 * When this component receives a new element it decides whether to
 * issue the frame or to accumulate.
 */
def CreateBuffer(length: Int):
  component Buffer (in: Double) >> (out: Array[Double])
    with (currentLength: Int = 0, currentBuffer: List[Double] = Nil) = {
        val buf = in :: currentBuffer
        if(currentLength == length - 1) {
          out := buf
          currentBuffer := Nil
          currentLength := 0
        } else {
          currentBuffer := buf
          currentLength := currentLength + 1
        }
}

def CreateDigitalFilter(frameLength: Int):
  component DigitalFilter (in: Array[Double]) >> (out: Array[Double])
    with (prevOutput: Array[Double] = Array.fill(frameLength)(0.0)) = {
      // implementation of digital filter (mathematical implementation)
}

component Unframer (in: Array[Double]) >> (out: Double) = {
  out ::= in.toIterable
  /*
      for{ i <- in } {
        out := i
      }
  */
}

// NB: there is a delay before first output appears on output.
// in this case the delay is 160 ticks.
component Filter (in: Double) >> (out: Double) = {
  val frameLength = 160
  val buf1 = CreateBuffer(frameLength)
  val df1 = CreateDigitalFilter(frameLength)
  in >> buf1.in
  buf1.out >> df1.in
  df1.out >> Unframer.in
  Unframer.out >> out
}
